{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "A CloudFormation template that will deploy the Nutrition Information System on AWS. It creates a relational data store and uses an EC2 instance to store data into the RDS instance. It also creates an autoscaling group which can automatically scale up/down depending on the CPU Utilization. The incoming requests to this application are managed by a load balancer",

  "Parameters" : {
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
    },
    "DatabaseRootUserName": {
      "Description": "Enter the root user name for the nutritioninfo database",
      "Type": "String",
      "MinLength": "4",
      "MaxLength": "10",
      "Default": "root",
      "ConstraintDescription": "minimum of 4 characters maximum of 10"
    },
    "DatabaseRootPassword": {
      "Description": "Enter the password for the nutritioninfo database",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "20",
      "Default": "subbu1993",
      "ConstraintDescription": "minimum of 8 characters maximum of 20"
    },
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "Can contain only ASCII characters."
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "HVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "us-west-2"      : { "PV64" : "ami-af86c69f", "HVM64" : "ami-8786c6b7", "HVMG2" : "ami-47296a77"  }
    }
  },

  "Resources" : {

    "FullRDSAccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
          "AssumeRolePolicyDocument": {
            "Version" : "2012-10-17",
            "Statement" : [{
                "Effect" : "Allow",
                "Principal": {
                  "Service": [
                    "ec2.amazonaws.com"
                  ]
                },
                "Action" : [ "sts:AssumeRole" ]
              }]
          },
          "Path": "/",
          "Policies":[{
            "PolicyName" : "FullRDSAccessPolicy",
            "PolicyDocument" : {
              "Version" : "2012-10-17",
              "Statement" : [{
                "Action" : [
                  "rds:*",
                  "ec2:DescribeAccountAttributes",
                  "ec2:DescribeAvailabilityZones",
                  "ec2:DescribeVpcs"
                ],
                "Effect" : "Allow",
                "Resource" : "*"
              }]
            }
          }]
      }
    },

    "RDSReadOnlyAccess": {
      "Type": "AWS::IAM::Role",
      "Properties": {
          "AssumeRolePolicyDocument": {
            "Version" : "2012-10-17",
            "Statement" : [
              {
                "Principal": {
                  "Service": [ "ec2.amazonaws.com"  ]
                },
                "Effect" : "Allow",
                "Action" : [ "sts:AssumeRole" ]
              }]
          },
          "Policies":[{
            "PolicyName" : "ReadRDSAccessPolicy",
            "PolicyDocument" : {
              "Version" : "2012-10-17",
              "Statement" : [{
                "Action" : [
                  "rds:Describe*",
                  "rds:ListTagsForResource"
                ],
                "Effect" : "Allow",
                "Resource" : "*"
              }]
            }
          }]
      }
    },

    "FullAccessEC2Role": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {"Ref": "FullRDSAccessRole"} ]
      }
    },

    "ReadOnlyEC2Role": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {"Ref": "RDSReadOnlyAccess"} ]
      }
    },
    "MyDBSecurityGroup": {
      "Type" : "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "DBSecurityGroupIngress": [{
          "EC2SecurityGroupName" : {"Ref":"WebServerSecurityGroup"}
        }],
        "GroupDescription"      : "Access to RDS"
      }

    },
    "MyRDSInstance": {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
         "AllocatedStorage" : "5",
         "DBInstanceClass" : "db.t1.micro",
         "Engine" : "MySQL",
         "EngineVersion" : "5.5",
         "MasterUsername" : {"Ref": "DatabaseRootUserName"},
         "MasterUserPassword" : {"Ref": "DatabaseRootPassword"},
         "DBSecurityGroups" : [{"Ref": "MyDBSecurityGroup"}]
      }
    },

    "WebServerInstance": {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment" : "Install a simple PHP application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "mysql"       : [],
                "mysql-server": [],
                "mysql-libs": []
              }
            },
            "services" : {
              "sysvinit" : {
                "mysqld": { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "InstanceInitiatedShutdownBehavior" : "terminate",
        "IamInstanceProfile" : {"Ref": "FullAccessEC2Role"},

        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
              "#!/bin/bash -xe\n",
              "yum update -y aws-cfn-bootstrap\n",

              "# Install the files and packages from the metadata\n",
              "/opt/aws/bin/cfn-init -v ",
              "         --stack ", { "Ref" : "AWS::StackName" },
              "         --resource WebServerInstance ",
              "         --region ", { "Ref" : "AWS::Region" }, "\n",

              "# Signal the status from cfn-init\n",
              "/opt/aws/bin/cfn-signal -e $? ",
              "         --stack ", { "Ref" : "AWS::StackName" },
              "         --resource WebServerInstance ",
              "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "#!/bin/bash -xe\n",
             "wget https://s3-us-west-2.amazonaws.com/dbjvrs/db.sql\n",
             "mysql -h " , {"Fn::GetAtt": ["MyRDSInstance","Endpoint.Address"]}, " -P 3306 -u",{"Ref": "DatabaseRootUserName"} ," --password=",{"Ref": "DatabaseRootPassword"} ," < db.sql\n",
             "shutdown -h now\n"

        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      }
    },
    "WebServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Install a simple PHP application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "httpd"             : [],
                "php"               : [],
                "php-mysql"         : []
              }
            },

            "files": {
              "/var/www/html/index.html" : {
                "content" : { "Fn::Join" : ["", [
                  "<html>\n",
                  "  <head>\n",
                  "    <title>AWS CloudFormation PHP Sample</title>\n",
                  "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                  "  </head>\n",
                  "  <body>\n",
                  "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
                  "    <p/>\n",
                  "  </body>"
                ]]},
                "mode"    : "000644",
                "owner"   : "apache",
                "group"   : "apache"
              },
              "/var/www/html/index.php" : {
                "content" : { "Fn::Join" : [ "", [
                  "<?php\n",
                  "$connection = mysqli_connect(\"" , {"Fn::GetAtt": ["MyRDSInstance","Endpoint.Address"]},"\", \"",{"Ref": "DatabaseRootUserName"},"\", \"",{"Ref": "DatabaseRootPassword"},"\", \"nutritioninfo\");\n",
                  "$query = \"select * from foodinfo where Name='\".$_GET['q'].\" ' \"; \n",
                  "$result = $connection->query($query);\n",
                  "$row = $result->fetch_assoc();\n",
                  "$output = \"{Carbohydrates: \".$row[\"Carbohydrate\"].\" |  Proteins: \".$row[\"Protein\"].\" |  Vitamins: \".$row[\"Vitamins\"].\" |  Fat: \".$row[\"Fat\"].\"}\";\n",
                  "echo json_encode($output);\n",
                  "?>\n"
                ]]},
                "mode"    : "000644",
                "owner"   : "apache",
                "group"   : "apache"
              },
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServerLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r WebServerLaunchConfig ",
                                                   " --region     ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },
            "services" : {
              "sysvinit" : {
                "httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                    "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "IamInstanceProfile" : {"Ref": "ReadOnlyEC2Role"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                             "#!/bin/bash -xe\n",
                             "yum update -y aws-cfn-bootstrap\n",

                             "# Install the files and packages from the metadata\n",
                             "/opt/aws/bin/cfn-init -v ",
                             "         --stack ", { "Ref" : "AWS::StackName" },
                             "         --resource WebServerLaunchConfig ",
                             "         --region ", { "Ref" : "AWS::Region" }, "\n",

                             "# Start up the cfn-hup daemon to listen for changes to the Web Server metadata\n",
                             "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

                             "# Signal the status from cfn-init\n",
                             "/opt/aws/bin/cfn-signal -e $? ",
                             "         --stack ", { "Ref" : "AWS::StackName" },
                             "         --resource WebServerLaunchConfig ",
                             "         --region ", { "Ref" : "AWS::Region" }, "\n"
                                ]
                            ]
                          }
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      }
    },
    "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "MyAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "MyAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },
    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU utilization > 70% for 2 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "MyAutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU utilization < 30% for 2 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "30",
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "MyAutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "MyLoadbalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {     "Fn::GetAZs": "" },
        "Listeners": [{
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        }],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "MyAutoScalingGroup": {
     "Type" : "AWS::AutoScaling::AutoScalingGroup",
     "Properties" : {
        "AvailabilityZones": { "Fn::GetAZs": ""},
        "LaunchConfigurationName": {"Ref": "WebServerLaunchConfig"},
        "MaxSize" : "5",
        "MinSize" : "1",
        "LoadBalancerNames" :  [ { "Ref" : "MyLoadbalancer" } ]
      }
    },

    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    }
  },

  "Outputs" : {
    "URL": {
      "Description": "The URL of the application",
      "Value": {
        "Fn::Join": ["",["http://",{"Fn::GetAtt": ["MyLoadbalancer","DNSName"]}]]
      }
    }
  }
}
